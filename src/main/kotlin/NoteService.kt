object NoteService {
    //private var posts = emptyArray<Post>()

    fun add() {
//        titleзаголовок заметки.
//        строка, обязательный параметр
//        textтекст заметки.
//        строка, обязательный параметр
//        privacy_viewнастройки приватности просмотра заметки в специальном формате.
//        список слов, разделенных через запятую, по умолчанию all, доступен начиная с версии 5.30
//        privacy_commentнастройки приватности комментирования заметки в специальном формате.
//        список слов, разделенных через запятую, по умолчанию all, доступен начиная с версии 5.30
//        title
//        string
//
//        Заголовок заметки.
//
//        text
//        string
//
//        Текст заметки.
//
//        privacy
//        integer
//
//        Уровень доступа к заметке.
//        Возможные значения:
//
//
//
//        •
//        0 — все пользователи,
//
//        •
//        1 — только друзья,
//
//        •
//        2 — друзья и друзья друзей,
//
//        •
//        3 — только пользователь.
//
//        comment_privacy
//        integer
//
//        Уровень доступа к комментированию заметки.
//        Возможные значения:
//
//
//
//        •
//        0 — все пользователи,
//
//        •
//        1 — только друзья,
//
//        •
//        2 — друзья и друзья друзей,
//
//        •
//        3 — только пользователь.
//
//        privacy_view
//        string
//
//        Настройки приватности просмотра заметки в специальном формате.
//
//        privacy_comment
//        string
//
//        Настройки приватности комментирования заметки в специальном формате.
    }


    fun createComment() {
//        Параметры
//        note_id
//        positive
//
//        Идентификатор заметки.
//
//        owner_id
//        positive
//
//        Идентификатор владельца заметки.
//
//        reply_to
//        positive
//
//        Идентификатор пользователя, ответом на комментарий которого является добавляемый комментарий (не передаётся, если комментарий не является ответом).
//
//        message
//        string
//
//        Текст комментария.
//
//        guid
//        string
//
//        Уникальный идентификатор, предназначенный для предотвращения повторной отправки одинакового комментария.
//
//        Результат
//        После успешного выполнения возвращает идентификатор созданного комментария (cid).
    }

    fun notesDelete() {
//    Удаляет заметку текущего пользователя.
//
//    Параметры
//    note_id
//    positive
//
//    Идентификатор заметки.
//
//    Результат
//    После успешного выполнения возвращает 1.
    }

    fun notesDeleteComment() {
//    Удаляет комментарий к заметке.
//
//
//
//    Параметры
//    comment_id
//    positive
//
//    Идентификатор комментария.
//
//    owner_id
//    positive
//
//    Идентификатор владельца заметки.
//
//    Результат
//    После успешного выполнения возвращает 1.
    }

    fun notesEdit() {
//       Редактирует заметку текущего пользователя .
//
//       Параметры
//       note_id
//       positive
//
//       Идентификатор заметки .
//
//       title
//       string
//
//       Заголовок заметки .
//
//       text
//       string
//
//       Текст заметки .
//
//       privacy
//       integer
//
//       Уровень доступа к заметке .
//       Возможные значения :
//
//
//
//       •
//       0 — все пользователи,
//
//       •
//       1 — только друзья,
//
//       •
//       2 — друзья и друзья друзей,
//
//       •
//       3 — только пользователь.
//
//       comment_privacy
//       integer
//
//       Уровень доступа к комментированию заметки.Возможные значения :
//
//
//
//       •
//       0 — все пользователи,
//
//       •
//       1 — только друзья,
//
//       •
//       2 — друзья и друзья друзей,
//
//       •
//       3 — только пользователь.
//
//       privacy_view
//       string
//
//       Настройки приватности просмотра заметки в специальном формате.privacy_comment
//       string
//
//       Настройки приватности комментирования заметки в специальном формате.Результат
//       После успешного выполнения возвращает 1.Коды ошибок

    }

    fun notesEditComment() {
//    Редактирует указанный комментарий у заметки.
//
//
//    Параметры
//    comment_id
//    positive
//
//    Идентификатор комментария.
//
//    owner_id
//    positive
//
//    Идентификатор владельца заметки.
//
//    message
//    string
//
//    Новый текст комментария.
//
//    Результат
//    После успешного выполнения возвращает 1.
    }

    fun notesGet() {
//    Возвращает список заметок, созданных пользователем.
//
//    Параметры
//    note_ids
//    string
//
//    Идентификаторы заметок, информацию о которых необходимо получить.
//
//    user_id
//    positive
//
//    Идентификатор пользователя, информацию о заметках которого требуется получить.
//
//    offset
//    positive
//
//    Смещение, необходимое для выборки определенного подмножества заметок.
//
//    count
//    positive
//
//    Количество заметок, информацию о которых необходимо получить.
//
//    sort
//    positive
//
//    Сортировка результатов (0 — по дате создания в порядке убывания, 1 - по дате создания в порядке возрастания).
//
//    Результат
//    После успешного выполнения возвращает список объектов заметок.
    }

    fun notesGetById() {
//    Возвращает заметку по её id.
//
//    Параметры
//    note_id
//    positive
//
//    Идентификатор заметки.
//
//    owner_id
//    positive
//
//    Идентификатор владельца заметки.
//
//    need_wiki
//    checkbox
//
//    Определяет, требуется ли в ответе wiki-представление заметки (работает, только если запрашиваются заметки текущего пользователя).

    }

    fun notesGetComments() {
//    Возвращает список комментариев к заметке.
//
//    Параметры
//    note_id
//    positive
//
//    Идентификатор заметки.
//
//    owner_id
//    positive
//
//    Идентификатор владельца заметки.
//
//    sort
//    positive
//
//    Сортировка результатов (0 — по дате добавления в порядке возрастания, 1 — по дате добавления в порядке убывания).
//
//    offset
//    positive
//
//    Смещение, необходимое для выборки определенного подмножества комментариев.
//
//    count
//    positive
//
//    Количество комментариев, которое необходимо получить.
    }

   fun notesRestoreComment() {
//    Восстанавливает удалённый комментарий.
//
//    Этот метод можно вызвать с ключом доступа пользователя, полученным в Standalone-приложении через Implicit Flow.
//
//    Требуются права доступа: notes.
//
//    Параметры
//    comment_id
//    positive
//
//    Идентификатор удаленного комментария.
//
//    owner_id
//    positive
//
//    Идентификатор владельца заметки.
}
}